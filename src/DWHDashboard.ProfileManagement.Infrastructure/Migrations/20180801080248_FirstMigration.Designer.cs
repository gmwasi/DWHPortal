// <auto-generated />
using System;
using DWHDashboard.ProfileManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DWHDashboard.ProfileManagement.Infrastructure.Migrations
{
    [DbContext(typeof(DwhDashboardContext))]
    [Migration("20180801080248_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.Impersonator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Password");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Impersonators");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.OrganisationAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("OrganisationId");

                    b.Property<Guid>("TabViewId");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("TabViewId");

                    b.ToTable("OrganisationAccesses");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.TableauView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomParentName");

                    b.Property<string>("Name");

                    b.Property<decimal?>("Rank");

                    b.Property<string>("TableauId");

                    b.Property<Guid>("TableauWorkbookId");

                    b.Property<bool>("Voided");

                    b.Property<string>("WorkbookTableauId");

                    b.HasKey("Id");

                    b.HasIndex("TableauWorkbookId");

                    b.ToTable("TableauViews");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.TableauWorkbook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("TableauId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("TableauWorkbooks");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Designation");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<Guid?>("ImpersonatorId");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsTableau");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ReasonForAccessing");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Title");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("UserConfirmed");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("ImpersonatorId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.UserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bundle");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.UserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.ViewConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Containing");

                    b.Property<string>("Display");

                    b.Property<string>("NotContaining");

                    b.Property<decimal>("Rank");

                    b.Property<string>("Section");

                    b.HasKey("Id");

                    b.ToTable("ViewConfigs");
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.OrganisationAccess", b =>
                {
                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.Organization")
                        .WithMany("Views")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.TableauView")
                        .WithMany("TempOrgs")
                        .HasForeignKey("TabViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.RoleClaim", b =>
                {
                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.TableauView", b =>
                {
                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.TableauWorkbook")
                        .WithMany("TabViews")
                        .HasForeignKey("TableauWorkbookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.User", b =>
                {
                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.Impersonator", "Impersonator")
                        .WithMany("Users")
                        .HasForeignKey("ImpersonatorId");

                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.UserClaim", b =>
                {
                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.UserLogin", b =>
                {
                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.UserRole", b =>
                {
                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DWHDashboard.ProfileManagement.Core.Model.UserToken", b =>
                {
                    b.HasOne("DWHDashboard.ProfileManagement.Core.Model.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
